(defun null (x) (eq x nil))
(defun not (x) (eq x nil))
(defun caar (x) (car (car x)))
(defun cadr (x) (car (cdr x)))
(defun first (x) (car x))
(defun second (x) (cadr x))
(defun listp (x) (cond ((null x) t) ((atomp x) nil) (t (listp (cdr x)))))
(defun append (x y) (cond ((null x) (cons y nil)) (t (cons (car x) (append (cdr x) y)))))
(defun reverse (x) (cond ((null x) x) (t (append (reverse (cdr x)) (car x)))))
(defun map (f x) (cond ((null x) x) (t (cons (f (car x)) (map f (cdr x))))))
(defun 1+ (x) (+ 1 x))

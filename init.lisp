(defun and (x y) (cond (x (cond (y t) (t nil))) (t nil)))
(defun null (x) (eq x nil))
(defun not (x) (eq x nil))
(defun caar (x) (car (car x)))
(defun cadr (x) (car (cdr x)))
(defun cadar (x) (car (cdr (car x))))
(defun first (x) (car x))
(defun second (x) (cadr x))
(defun list (x y) (cons x (cons y nil)))
(defun pair (x y) (cond ((and (null x) (null y)) nil) ((and (not (atomp x)) (not (atomp y))) (cons (list (car x) (car y)) (pair (cdr x) (cdr y))))))
(defun assoc (x y) (cond ((eq (caar y) x) (cadar y)) (t (assoc x (cdr y)))))
(defun listp (x) (cond ((null x) t) ((atomp x) nil) (t (listp (cdr x)))))
(defun append (x y) (cond ((null x) y) (t (cons (car x) (append (cdr x) y)))))
(defun reverse (x) (cond ((null x) x) (t (append (reverse (cdr x)) (cons (car x) nil)))))
(defun map (f x) (cond ((null x) x) (t (cons (f (car x)) (map f (cdr x))))))
(defun 1+ (x) (+ 1 x))
